class Solution {
public:
    bool isValid(string s) {
      std::unordered_map<char, char> bracketMap = {
        {')', '('},
        {'}', '{'},
        {']', '['}
    };

    std::stack<char> stack; // Stack to store opening brackets

    for (char ch : s) {
        if (bracketMap.count(ch)) { // If the character is a closing bracket
            // Check if the stack is non-empty and the top matches the corresponding opening bracket
            if (!stack.empty() && stack.top() == bracketMap[ch]) {
                stack.pop(); // Valid pair, pop the opening bracket
            } else {
                return false; // Invalid case
            }
        } else {
            stack.push(ch); // Push opening brackets onto the stack
        }
    }

    return stack.empty(); // If the stack is empty, all brackets were matched
  }
};
