// Brute force approch

class Solution {
public:
    void sortColors(vector<int>& nums) {
    int n = nums.size();
    int count0=0, count1=0, count2=0;
    
    // 1st pass  O(n)
    for(int i=0 ; i<n ; i++){
        if(nums[i]==0)  count0++;
        if(nums[i]==1)  count1++;
        if(nums[i]==2)  count2++;
    } 
    // 2nd pass   O(n)
     int idx=0 ;
     for(int i =0; i<count0; i++){
        nums[idx++]=0;
     }
     for(int i =0;i<count1; i++){
        nums[idx++]=1;
     }
     for(int i =0;i<count2; i++){
        nums[idx++]=2;
     }
    }
};

// Optimized approch    (Dutch national flag algorithm)

class Solution {
public:
    void sortColors(vector<int>& a) {
    int mid=0 , low=0 , high=a.size()-1; 

    while(mid <=high){
    
    if(a[mid]==0){
        swap(a[low],a[mid]);
        low++;
        mid++;
    }
    else if(a[mid]==1){
        mid++;
    }
    else{
        swap(a[high],a[mid]);
        high--;
    }
    }
    }
};
